name: build

on:
  push:
    branches:
      - master
      - ci
      - 'release/**'
    paths-ignore:
      - 'DOCS/**'
      - 'TOOLS/lua/**'
      - '.editorconfig'
      - '.github/ISSUE_TEMPLATE/**'
      - '.github/PULL_REQUEST_TEMPLATE'
      - '.gitignore'
      - 'Copyright'
      - 'README.md'
      - 'RELEASE_NOTES'
  pull_request:
    branches: [master]
    paths-ignore:
      - 'DOCS/**'
      - 'TOOLS/lua/**'
      - '.editorconfig'
      - '.github/ISSUE_TEMPLATE/**'
      - '.github/PULL_REQUEST_TEMPLATE'
      - '.gitignore'
      - 'Copyright'
      - 'README.md'
      - 'RELEASE_NOTES'

jobs:
  macos:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - "macos-13"
          - "macos-14"
          - "macos-15"
        arch:
          - "arm"
          - "intel"
        ffmpeg:
          - "binary-ffmpeg"
          - "ffmpeg+libzvbi"
        exclude:
          - arch: "arm"
            os: "macos-13"
          - arch: "intel"
            os: "macos-14"
          - arch: "intel"
            os: "macos-15"
          - ffmpeg: "ffmpeg+libzvbi"
            os: "macos-14"
        include:
          - os: "macos-14"
            xcode: "Xcode_15.2"
    steps:
      - uses: actions/checkout@v4

      - name: Remove stray upstream python binary symlinks under /usr/local
        run: |
          find /usr/local/bin -lname '*/Library/Frameworks/Python.framework/*' -delete -print
          brew unlink python && brew link --overwrite python

      - name: Unlink pkg-config if the CI runner happens to have it already installed
        run: |
          find "$(brew config | grep HOMEBREW_PREFIX | cut -f 2- -d ' ')/bin" -lname '*/pkg-config@0*/*' -print -exec brew unlink pkg-config@0.29.2 \; -quit

      - name: Change Xcode version
        if: ${{ matrix.xcode != '' }}
        run: |
          sudo xcode-select -s /Applications/${{ matrix.xcode }}.app

      - name: Install common dependencies
        run: |
          brew update
          brew install -q autoconf automake pkgconf libtool python freetype fribidi little-cms2 \
            luajit libass meson uchardet mujs libplacebo molten-vk vulkan-loader vulkan-headers

      - name: Install binary ffmpeg
        if: ${{ matrix.ffmpeg == 'binary-ffmpeg' }}
        run: |
          brew install -q ffmpeg

      - name: Compile and install ffmpeg with libzvbi support
        if: ${{ matrix.ffmpeg != 'binary-ffmpeg' }}
        run: |
          brew tap lescanauxdiscrets/tap
          brew install -q lescanauxdiscrets/tap/zvbi
          brew tap homebrew-ffmpeg/ffmpeg
          brew install -q homebrew-ffmpeg/ffmpeg/ffmpeg --with-aribb24 --with-dvd --with-libdvdnav --with-libdvdread \
            --with-jpeg-xl --with-libaribb24 --with-libbluray --with-libplacebo --with-librist --with-libsoxr \
            --with-libssh --with-libvidstab --with-libvmaf --with-libzvbi --with-opencore-amr --with-openjpeg \
            --with-openssl --with-rav1e --with-rubberband --with-speex --with-srt --with-svt-av1 --with-tesseract \
            --with-webp --with-zeromq --with-zimg

      - name: Build with meson
        id: build
        run: |
          ./ci/build-macos.sh
        env:
          CC: "clang"
          CXX: "clang++"
          TRAVIS_OS_NAME: "${{ matrix.os }}"

      - name: Create App Bundle
        run: |
          meson compile -C build macos-bundle
          tar -czvf mpv.tar.gz -C build mpv.app

      - name: Print meson log
        if: ${{ failure() && steps.build.outcome == 'failure' }}
        run: |
          cat ./build/meson-logs/meson-log.txt

      - name: Run meson tests
        id: tests
        run: |
          meson test -C build

      - name: Print meson test log
        if: ${{ failure() && steps.tests.outcome == 'failure' }}
        run: |
          cat ./build/meson-logs/testlog.txt

      - uses: actions/upload-artifact@v4
        with:
          name: mpv-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.ffmpeg != 'binary-ffmpeg' && '-zvbi' || '' }}
          path: mpv.tar.gz
